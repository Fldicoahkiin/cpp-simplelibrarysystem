# GitHub Actions 工作流：自动构建跨平台的可执行文件

name: Build Project

# 触发条件：
# 1. 当代码被推送到 main 分支时
# 2. 允许在 GitHub Actions 页面手动触发
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    # 使用构建矩阵，同时在 Windows 和 macOS 上运行
    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    # 指定运行环境
    runs-on: ${{ matrix.os }}

    steps:
    # 第1步：检出代码
    # 获取您仓库的最新代码
    - name: Checkout repository
      uses: actions/checkout@v4

    # 第2步：安装和缓存 vcpkg
    # 使用微软官方的 action 来设置 vcpkg
    # 它会自动缓存 vcpkg，加速后续构建
    - name: Setup vcpkg
      uses: microsoft/setup-vcpkg@v1
      with:
        # 指定 vcpkg 的 Git 提交哈希，确保构建环境的稳定性
        vcpkg-commit-id: '15f65b53d60741517a177264a4d952860d5b323e'

    # 第3步：使用 vcpkg 安装依赖库
    - name: Install dependencies
      run: |
        vcpkg install cpp-httplib[openssl] nlohmann-json mysql-connector-c

    # 第4步：配置 CMake
    # -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake 是关键
    # 它告诉 CMake 使用 vcpkg 来寻找所有依赖库
    - name: Configure CMake
      run: |
        cmake -B build -S . -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake

    # 第5步：编译项目
    # --config Release 指定编译发布版本
    - name: Build project
      run: |
        cmake --build build --config Release

    # 第6步：上传构建产物
    # 将编译好的可执行文件打包，方便下载
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        # 产物的名称，例如 "build-windows"
        name: build-${{ matrix.os }}
        # 要上传的文件路径
        # Windows 的路径是 build/Release/server.exe
        # macOS/Linux 的路径是 build/server
        path: |
          build/Release/server.exe
          build/server
        if-no-files-found: ignore # 如果文件未找到，则忽略此步骤 