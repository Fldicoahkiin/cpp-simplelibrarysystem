# GitHub Actions: Build and Release Cross-Platform Executables
name: Build and Release

# 触发条件：
# 1. 当代码被推送到 main 分支时
# 2. 允许在 GitHub Actions 页面手动触发
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    # 使用构建矩阵，同时在 Windows 和 macOS 上运行
    strategy:
      matrix:
        os: [windows-latest, macos-latest]

    # 指定运行环境
    runs-on: ${{ matrix.os }}

    steps:
    # 第1步：检出代码
    # 获取您仓库的最新代码
    - name: Checkout repository
      uses: actions/checkout@v4

    # 第2步：设置 vcpkg
    # 使用社区推荐的 action "lukka/run-vcpkg"。
    # 这是关键的修复步骤：
    - name: Setup vcpkg
      uses: lukka/run-vcpkg@v11
      with:
        # Pin vcpkg to a specific commit to ensure stable and reproducible builds.
        # This prevents failures caused by breaking changes in the vcpkg repository.
        vcpkgGitCommitId: 'ef7dbf94b9198bc58f45951adcf1f041fcbc5ea0'

    # 第3步：配置 CMake
    # -DCMAKE_TOOLCHAIN_FILE=$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake 是关键。
    # 它告诉 CMake 使用 vcpkg 来寻找所有依赖库。
    # vcpkg 工具链会自动运行 vcpkg install 来安装 vcpkg.json 中定义的依赖。
    - name: Configure CMake
      run: |
        cmake -B build -S . -DCMAKE_TOOLCHAIN_FILE="$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake"
      shell: bash # 强制使用 bash, 确保 $VCPKG_ROOT 在所有平台都能被正确解析

    # 第4步：编译项目
    # --config Release 指定编译发布版本。
    - name: Build project
      run: |
        cmake --build build --config Release

    # 第5步：上传构建产物
    # 将编译好的可执行文件打包，方便后续的 release 任务使用。
    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        # 产物的名称，例如 "build-windows-latest"
        name: build-${{ matrix.os }}
        # 要上传的文件路径。
        # Windows 的路径是 build/Release/server.exe
        # macOS/Linux 的路径是 build/server
        path: |
          build/Release/server.exe
          build/server
        if-no-files-found: ignore # 如果文件未找到，则忽略此步骤

  release:
    # release 任务依赖于 build 任务，在所有 build 成功后运行。
    needs: build
    runs-on: ubuntu-latest
    # 需要写权限来创建 Release 和上传产物。
    permissions:
      contents: write

    steps:
      - name: Download windows artifact
        uses: actions/download-artifact@v4
        with:
          name: build-windows-latest
          path: artifacts/windows

      - name: Download macos artifact
        uses: actions/download-artifact@v4
        with:
          name: build-macos-latest
          path: artifacts/macos

      - name: Display structure of downloaded files
        run: ls -R artifacts

      - name: Prepare release assets
        run: |
          set -x
          # Move and rename artifacts for the release
          if [ -f "artifacts/windows/Release/server.exe" ]; then
            mv artifacts/windows/Release/server.exe ./server-windows.exe
          fi
          if [ -f "artifacts/macos/server" ]; then
            mv artifacts/macos/server ./server-macos
          fi

      - name: Set release date env
        id: set_release_date
        run: |
          export TZ='Asia/Shanghai'
          echo "RELEASE_DATE=$(date +'%Y-%m-%d-%H-%M')" >> $GITHUB_ENV
        shell: bash

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            server-windows.exe
            server-macos
          # 使用 UTC 时间作为发布标签，例如 Release-2025-06-21-10-30
          tag_name: Release-${{ env.RELEASE_DATE }}
          name: Release ${{ env.RELEASE_DATE }}
          body: |
            Automated release from commit ${{ github.sha }}