# GitHub Actions 工作流：自动构建跨平台的可执行文件并创建Release
#
# 设计原则:
# 1. 依赖声明化：使用根目录的 vcpkg.json 文件来管理所有 C++ 依赖，保证了环境的可复现性。
# 2. 跨平台构建与发布：通过构建矩阵（matrix）在 Windows 和 macOS 上并行构建，
#    并设立一个独立的 release 任务来整合所有产物，创建带有规范命名文件的 GitHub Release。
# 3. 自动化版本管理：每次推送到 main 分支都会自动创建一个以北京时间命名的 Release，
#    实现了持续交付（Continuous Delivery）。
#
name: 构建并发布

#-----------------------------------------------------------------------------
# 触发条件
#-----------------------------------------------------------------------------
on:
  # 1. 当代码被推送到 main 分支时自动触发
  push:
    branches: [ "main" ]
  # 2. 允许在 GitHub Actions 页面手动触发
  workflow_dispatch:

#-----------------------------------------------------------------------------
# 作业定义
#-----------------------------------------------------------------------------
jobs:
  #--- 构建作业 (build) ---
  # 此作业负责在不同操作系统上编译项目。
  build:
    # 使用构建矩阵，在 Windows 和 macOS 上并行执行此作业
    strategy:
      matrix:
        include:
          - os: windows-latest
            triplet: x64-windows-static
            exe_name: server.exe
            final_name: server-windows.exe
          - os: macos-latest
            triplet: arm64-osx
            exe_name: server
            final_name: server-macos

    # 指定运行环境
    runs-on: ${{ matrix.os }}

    steps:
      # 第1步：检出代码
      - name: 检出仓库代码
        uses: actions/checkout@v4

      # 第2步：设置 vcpkg (使用静态库)
      - name: 通过 vcpkg 安装静态依赖
        uses: lukka/run-vcpkg@v11
        env:
          VCPKG_TARGET_TRIPLET: ${{ matrix.triplet }}
        with:
          vcpkgGitCommitId: 'ef7dbf94b9198bc58f45951adcf1f041fcbc5ea0'

      # 第3步：配置 CMake (强制静态链接)
      - name: 配置 CMake
        run: |
          cmake -B build -S . \
            -DCMAKE_TOOLCHAIN_FILE="$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" \
            -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }} \
            -DBUILD_SHARED_LIBS=OFF
        shell: bash

      # 第4步：将 HTML 嵌入为 C++ 头文件
      - name: 嵌入 HTML 资源
        run: |
          python -c "with open('index.html', 'r', encoding='utf-8') as f: content = f.read(); print(f'#pragma once\\n\\nconst char index_html_content[] = R\"raw({content})raw\";') " > build/index_html.h
        shell: bash

      # 第5步：编译项目
      - name: 编译可执行文件
        run: cmake --build build --config Release

      # 第6步：上传构建产物
      - name: 上传可执行文件
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-${{ matrix.os }}
          path: build/${{ matrix.exe_name }}

  #--- 发布作业 (release) ---
  # 此作业在所有构建成功后运行，负责创建最终的 GitHub Release。
  release:
    # 此作业依赖于 "build" 作业，必须在所有 build 成功后才会运行。
    needs: build
    runs-on: ubuntu-latest
    # 需要写权限来创建 GitHub Release 和上传文件。
    permissions:
      contents: write

    steps:
      # 第1步：下载所有构建产物
      - name: 下载所有产物
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      # 第2步：准备用于发布的资源
      - name: 准备发布资源
        run: |
          find artifacts -name 'server.exe' -exec mv {} ./server-windows.exe \;
          find artifacts -name 'server' -exec mv {} ./server-macos \;
        shell: bash

      # 第3步：显示文件结构 (用于调试)
      - name: 显示最终文件
        run: ls -l

      # 第4步：生成发布信息
      - name: 生成发布标签和名称
        id: release_info
        run: |
          echo "TAG=Release-$(TZ='Asia/Shanghai' date +'%Y-%m-%d-%H%M')" >> $GITHUB_OUTPUT
          echo "NAME=Release $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M')" >> $GITHUB_OUTPUT
        shell: bash

      # 第5步：创建 GitHub Release
      - name: 创建 GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            server-windows.exe
            server-macos
          tag_name: ${{ steps.release_info.outputs.TAG }}
          name: ${{ steps.release_info.outputs.NAME }}
          body: |
            由 commit ${{ github.sha }} 自动触发的构建产物。
            这是一个独立的、自包含的可执行文件。
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}